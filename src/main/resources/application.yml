#port?? ???!!!!
#application.prrperties? ?? - yml? ????? ???

#server.port=8081

#DB??#
#spring.datasource.url=jdbc:mariadb://localhost:3306/member
#spring.datasource.username=jdbc"mariadb://localhost:3306/root
#spring.datasource.userpassword=jdbc"mariadb://localhost:3306/1234



#yml??? port?? ??, ????? ????? ????., "=" ?? ":"? ????
#sever:
#  port: 8081

#DB??#
#spring:
#  profile:
#    active:dev
# or  profile:
##    active:prod
#  datasource:
#    url: jdbc:mariadb://localhost:3306/member
#    username: root
#    password: 1234
# ---
#sever:
#  port: 8082
spring:
#  Controller와 jsp사용시에 경로와 확장자 설정
#  기본설정이 타임리프이므로, 타임리프 의존성 제거해야 jsp사용가능
#  mvc:
#    view:
#      prefix: /WEB-INF/views/
#      suffix: .jsp

  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/basic
    username: root
    password: 1234
  jpa:
    database: mysql
#    innoDB 엔진사용 설정
    database-platform: org.hibernate.dialect.MariaDBDialect
#   스키마는 사정 생성 필요
    generate-ddl: true
    hibernate: #jpa의 구현체
#      create옵션은 매번 table을 drop후 생성
#      update옵션은 변경사항만 alter를 적용
#      validate는 실제DB와의 차이만을 check
#      실무에서는 update 또는 validate사용
      ddl-auto: update
#     ddl-auto: validate 수동으로 데이터를 넣겠다, 실무에서 대부분 쓴다. create는 절대 안씀, update는 컬럼 사이즈 변경이 안된다.
#    creat: 모든 DDL의 변경사항 반영(컬럼추가, 길이 변경 등)
#    update: 컬럼 길이 변경 X, 컬럼 추가 반영 -> raw ddl 쿼리문 DB변경
#    validate: DB직접 반영X ->차이점만 return해줌
#      jpa가 자동으로 쿼리를 실행할때, 쿼리가 console창에 보여지도록
    show_sql: true
#   show_sql console창에 찍히는것
#  springboot2.4 이상에서는 기본적으로 PathPattenParser를 사용하고 있는데,
#  이는 이전버전과 다른 경로매칭규칙을 가지고 있어, springfox와 같은 일부 라이브러리에서는 문제 발생
#  url: localhost:8080/swagger-ui/
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

#매퍼 파일의 위치를 명시한것
mybatis:
  mapper-locations: classpath:/mapper/**/*.xml